# bot.py
import logging
import datetime
import pytz
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, InputFile
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, CallbackContext
from telegram.ext import JobQueue
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from config import BOT_TOKEN, ADMIN_ID, COURSE_LINK, PAYMENT_DETAILS, CONTACT_USERNAME, COURSE_PRICE, MESSAGES, MAIN_MENU_KEYBOARD, REMINDER_INTERVAL_MINUTES, SHEET_URL, REMINDER_IMAGE_PATH, get_payment_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets ---
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
try:
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name(os.path.join(BASE_DIR, 'credentials.json'), scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SHEET_URL).sheet1
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
    sheet = None

def get_cached_user_status(context, user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ (user_data) –∏–ª–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    """
    if 'payment_status' in context.user_data:
        return context.user_data['payment_status']
    
    status = get_user_status(user_id)
    if status:
        context.user_data['payment_status'] = status
    return status

def get_user_status(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Google Sheets –ø–æ –µ–≥–æ Telegram ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    if not sheet:
        return None
    try:
        cell = sheet.find(str(user_id), in_column=4) # –ö–æ–ª–æ–Ω–∫–∞ 4 - "Telegram ID"
        if cell:
            return sheet.cell(cell.row, 5).value # –ö–æ–ª–æ–Ω–∫–∞ 5 - "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def update_user_status_and_cache(context, user_id, user_name, status):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –≤ –∫—ç—à–µ.
    """
    context.user_data['payment_status'] = status
    add_or_update_user_status(user_id, user_name, status)

def add_or_update_user_status(user_id, user_name, status):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    if not sheet:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    try:
        current_time_korea = datetime.datetime.now(pytz.timezone('Asia/Seoul')).strftime("%d.%m.%Y %H:%M:%S")

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –≤ –∫–æ–ª–æ–Ω–∫–µ "Telegram ID" (–∫–æ–ª–æ–Ω–∫–∞ 4)
        cell = sheet.find(str(user_id), in_column=4)

        if cell:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º "–î–∞—Ç—É" –∏ "–°—Ç–∞—Ç—É—Å"
            row_index = cell.row
            sheet.update_cell(row_index, 2, current_time_korea) # –ö–æ–ª–æ–Ω–∫–∞ 2: –î–∞—Ç–∞
            sheet.update_cell(row_index, 5, status) # –ö–æ–ª–æ–Ω–∫–∞ 5: –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} ({user_id}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ '{status}'.")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            next_row_number = len(sheet.get_all_records()) + 1
            new_row = [
                next_row_number,
                current_time_korea,
                user_name,
                user_id,
                status
            ]
            sheet.append_row(new_row)
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")

    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


async def setup_bot_commands(application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é."""
    commands = [
        BotCommand("start", "üöÄ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ"),
        BotCommand("buy", "‚úÖ –ö–£–ü–ò–¢–¨ –ö–£–†–°"),
        BotCommand("lesson", "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –£–†–û–ö"),
        BotCommand("question", "‚ÅâÔ∏è –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    update_user_status_and_cache(context, user.id, user.full_name, "–ó–∞—à–µ–ª –≤ –±–æ—Ç–∞")
    schedule_reminder_if_needed(context, user.id, user.full_name, REMINDER_INTERVAL_MINUTES)

    welcome_message = MESSAGES['welcome_message']['caption'].format(user_first_name=user.first_name)
    welcome_options = MESSAGES['welcome_message']['options']

    keyboard = []
    for text, data, type in MAIN_MENU_KEYBOARD:
        if type == "callback_data":
            keyboard.append([InlineKeyboardButton(text, callback_data=data)])
        elif type == "url":
            if data == "lesson":
                keyboard.append([InlineKeyboardButton(text, url=COURSE_LINK)])
            elif data == "question":
                keyboard.append([InlineKeyboardButton(text, url=f"https://t.me/{CONTACT_USERNAME}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                text=welcome_message,
                reply_markup=reply_markup,
                **welcome_options
            )
        except Exception:
            # If editing fails (e.g., message is a photo), send a new message
            await update.callback_query.message.reply_text(
                text=welcome_message,
                reply_markup=reply_markup,
                **welcome_options
            )
    else:
        await update.message.reply_text(
            text=welcome_message,
            reply_markup=reply_markup,
            **welcome_options
        )


async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /buy - –ø–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞."""
    user = update.effective_user
    update_user_status_and_cache(context, user.id, user.full_name, "–°–º–æ—Ç—Ä–µ–ª —Ü–µ–Ω—ã")
    schedule_reminder_if_needed(context, user.id, user.full_name, REMINDER_INTERVAL_MINUTES)

    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –ÆMoney", callback_data='yoomoney_btn'), InlineKeyboardButton("üá∫üá∏ VISA", callback_data='visa_btn')],
        [InlineKeyboardButton("üá∞üá∑ KOREA", callback_data='korean_account_btn'), InlineKeyboardButton("üíé USDT", callback_data='cryptowallet_btn')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = MESSAGES['payment_details_message']['caption']
    message_options = MESSAGES['payment_details_message']['options']

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup, **message_options)
        except Exception:
            # If editing fails (e.g., message is a photo), send a new message
            await update.callback_query.message.reply_text(text=message_text, reply_markup=reply_markup, **message_options)
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup, **message_options)

async def lesson_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /lesson - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫."""
    user = update.effective_user
    update_user_status_and_cache(context, user.id, user.full_name, "–°–º–æ—Ç—Ä–µ–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫")
    schedule_reminder_if_needed(context, user.id, user.full_name, REMINDER_INTERVAL_MINUTES)

    lesson_message = (
        "üìö <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!</b>\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∏ –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫—É—Ä—Å–æ–º:\n\n"
        f"üîó <a href='{COURSE_LINK}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É</a>\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å! üá∞üá∑"
    )

    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å", callback_data='purchase')],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text=lesson_message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        except Exception:
            # If editing fails (e.g., message is a photo), send a new message
            await update.callback_query.message.reply_text(text=lesson_message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(text=lesson_message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /question - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."""
    question_message = (
        "‚ùì <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b>\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∫—É—Ä—Å–µ –∏–ª–∏ –æ–ø–ª–∞—Ç–µ?\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ª–∏—á–Ω–æ –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!\n\n"
        f"üîó <a href='https://t.me/{CONTACT_USERNAME}'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É</a>"
    )

    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data='purchase')],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text=question_message, reply_markup=reply_markup, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        except Exception:
            # If editing fails (e.g., message is a photo), send a new message
            await update.callback_query.message.reply_text(text=question_message, reply_markup=reply_markup, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        await update.message.reply_text(text=question_message, reply_markup=reply_markup, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def handle_any_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await start(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_message = MESSAGES['help_message']['caption']
    help_options = MESSAGES['help_message']['options']
    await update.message.reply_text(text=help_message, **help_options)

def schedule_reminder_if_needed(context: ContextTypes.DEFAULT_TYPE, user_id, user_name, delay_minutes: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    status = get_cached_user_status(context, user_id)
    if status == "–û–ø–ª–∞—á–µ–Ω–æ":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    job_name = f"reminder_{user_id}"
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    for job in context.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()

    context.job_queue.run_once(
        send_reminder,
        datetime.timedelta(minutes=delay_minutes),
        chat_id=user_id,
        name=job_name
    )
    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} ({user_id}) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {delay_minutes} –º–∏–Ω—É—Ç.")

async def send_reminder(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º."""
    job = context.job
    try:
        reminder_text = MESSAGES['reminder_text']['caption']
        reminder_options = MESSAGES['reminder_text']['options']

        keyboard = [
            [InlineKeyboardButton("üí≥ –ö–£–ü–ò–¢–¨ –ö–£–†–°", callback_data='purchase')],
            [InlineKeyboardButton("‚ÅâÔ∏è –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°", url=f"https://t.me/{CONTACT_USERNAME}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        image_path = os.path.join(BASE_DIR, REMINDER_IMAGE_PATH)

        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo_file:
                await context.bot.send_photo(
                    chat_id=job.chat_id,
                    photo=InputFile(photo_file),
                    caption=reminder_text,
                    reply_markup=reply_markup,
                    **reminder_options
                )
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {job.chat_id}")
        else:
            await context.bot.send_message(
                chat_id=job.chat_id,
                text=reminder_text,
                reply_markup=reply_markup,
                **reminder_options
            )
            logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {image_path}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {job.chat_id}: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    data_type = query.data

    if data_type == 'purchase':
        await buy_command(update, context)

    elif data_type == 'lesson':
        await lesson_command(update, context)

    elif data_type in ['yoomoney_btn', 'visa_btn', 'korean_account_btn', 'cryptowallet_btn']:
        payment_type = data_type.replace('_btn', '')
        text, options = get_payment_message(payment_type)

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='purchase')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.edit_message_text(text=text, reply_markup=reply_markup, **options)
        except Exception:
            # If editing fails (e.g., message is a photo), send a new message
            await query.message.reply_text(text=text, reply_markup=reply_markup, **options)

    elif data_type == 'back_to_menu':
        await start(update, context)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
    user = update.effective_user

    if not update.message.photo:
        photo_message = MESSAGES['photo_required']['caption']
        photo_options = MESSAGES['photo_required']['options']
        await update.message.reply_text(text=photo_message, **photo_options)
        return

    photo_file_id = update.message.photo[-1].file_id

    update_user_status_and_cache(context, user.id, user.full_name, "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    context.user_data['payment_user_id'] = user.id

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    korea_tz = pytz.timezone('Asia/Seoul')
    korea_time = datetime.datetime.now(korea_tz)
    date_str = korea_time.strftime("%d.%m.%Y %H:%M:%S")

    caption_text = (
        f"ü•≥ <b>–ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {user.full_name}\n"
        f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
        f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–ö–æ—Ä–µ—è):</b> {date_str}\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
    )

    await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo_file_id,
                                 caption=caption_text,
                                 parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    if 0 <= korea_time.hour < 7:
        night_message = MESSAGES['night_check_message']['caption']
        night_options = MESSAGES['night_check_message']['options']
        await update.message.reply_text(text=night_message, **night_options)
    else:
        social_links_text = MESSAGES['social_links_text']['caption']
        social_links_options = MESSAGES['social_links_options']['options']
        await update.message.reply_text(text=social_links_text, **social_links_options)


async def handle_document_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
    document_message = MESSAGES['document_not_supported']['caption']
    document_options = MESSAGES['document_not_supported']['options']
    await update.message.reply_text(text=document_message, **document_options)


async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º."""
    query = update.callback_query
    await query.answer()

    user_id_to_confirm = query.data.split('_')[1]

    if str(query.from_user.id) != str(ADMIN_ID):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    try:
        # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        job_name = f"reminder_{user_id_to_confirm}"
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_confirm} –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

        payment_confirmed_user_text = MESSAGES['payment_confirmed_user']['caption']
        payment_confirmed_user_options = MESSAGES['payment_confirmed_user']['options']
        await context.bot.send_message(chat_id=user_id_to_confirm, text=payment_confirmed_user_text, **payment_confirmed_user_options)

        user = await context.bot.get_chat(user_id_to_confirm)
        update_user_status_and_cache(context, user_id_to_confirm, user.full_name, "–û–ø–ª–∞—á–µ–Ω–æ")

        payment_confirmed_admin_message = MESSAGES['payment_confirmed_admin']['caption'].format(user_id=user_id_to_confirm)
        payment_confirmed_admin_options = MESSAGES['payment_confirmed_admin']['options']
        await query.edit_message_caption(caption=payment_confirmed_admin_message, **payment_confirmed_admin_options)

    except Exception as e:
        logger.error(f"Failed to confirm payment for user {user_id_to_confirm}: {e}")
        await query.edit_message_caption("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.")


async def decline_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º."""
    query = update.callback_query
    await query.answer()

    user_id_to_decline = query.data.split('_')[1]

    if str(query.from_user.id) != str(ADMIN_ID):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    try:
        payment_declined_user_text = MESSAGES['payment_declined_user']['caption']
        payment_declined_user_options = MESSAGES['payment_declined_user']['options']

        keyboard = [
            [InlineKeyboardButton("üõ† –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{CONTACT_USERNAME}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(chat_id=user_id_to_decline, text=payment_declined_user_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML, **payment_declined_user_options)

        payment_declined_admin_message = MESSAGES['payment_declined_admin']['caption'].format(user_id=user_id_to_decline)
        payment_declined_admin_options = MESSAGES['payment_declined_admin']['options']
        await query.edit_message_caption(caption=payment_declined_admin_message, **payment_declined_admin_options)

    except Exception as e:
        logger.error(f"Failed to decline payment for user {user_id_to_decline}: {e}")
        await query.edit_message_caption("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN environment variable is not set. Please set it before running the bot.")

    application = Application.builder().token(BOT_TOKEN).job_queue(JobQueue()).build()

    application.post_init = post_init

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("buy", buy_command))
    application.add_handler(CommandHandler("lesson", lesson_command))
    application.add_handler(CommandHandler("question", question_command))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(purchase|lesson|yoomoney_btn|visa_btn|korean_account_btn|cryptowallet_btn|back_to_menu)$"))
    application.add_handler(CallbackQueryHandler(confirm_payment, pattern="^confirm_"))
    application.add_handler(CallbackQueryHandler(decline_payment, pattern="^decline_"))
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO & ~filters.COMMAND, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND, handle_document_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_any_text))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def post_init(application):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    await application.bot.delete_webhook()
    await setup_bot_commands(application)

if __name__ == '__main__':
    main()